function LinkedList() {
  var length = 0;
  var head = null;

  var Node = function (element) {
    this.element = element;
    this.next = null;
  };

  this.size = function () {
    return length;
  };

  this.head = function () {
    return head;
  };

  this.add = function (element) {
    var node = new Node(element);
    if (head === null) {
      head = node;
    } else {
      var currentNode = head;

      while (currentNode.next) {
        currentNode = currentNode.next;
      }

      currentNode.next = node;
    }

    length++;
  };

  // Only change code below this line
  this.removeAt = (indexToRemove) => {
    if (indexToRemove < 0 || indexToRemove >= this.size() || length === 0) {
      return null;
    }
    if (indexToRemove === 0) {
      const removed = head;
      head = head.next;
      length--;
      return removed.element;
    }


    let currentNode = head;
    let index = 0;

    while (index < indexToRemove - 1) {
      currentNode = currentNode?.next;
      index++;
    }

    const removed = currentNode.next;
    currentNode.next = removed.next;
    length--;
    return removed.element;

  }
  // Only change code above this line
}